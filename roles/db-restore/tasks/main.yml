# Restore the database based on export file
# vars:
#   - app_root
#   - db_container_name
#   - db_export_download_dir
#   - db_export_url
---
- name: start db container
  include_role:
    name: docker-up
  vars:
    container: "{{ db_container_name }}"

- name: Get PostgreSQL user name
  raw: >
    cd {{ app_root }} &&
    docker-compose exec
    {{ db_container_name }}
    printenv POSTGRES_USER
  register: _raw
- set_fact:
    postgres_user: "{{ _raw.stdout.strip() }}"

- name: Get PostgreSQL db name
  raw: >
    cd {{ app_root }} &&
    docker-compose exec
    {{ db_container_name }}
    printenv POSTGRES_DB
  register: _raw
- set_fact:
    postgres_db: "{{ _raw.stdout.strip() }}"

- name: download export file
  get_url:
    url: "{{ db_export_url }}"
    dest: "{{ db_export_download_dir }}"
  register: _db_export

- include_role:
    name: docker-down

- name: start db container
  include_role:
    name: docker-up
  vars:
    container: "{{ db_container_name }}"

- name: get id of {{ db_container_name }} container
  command: docker-compose ps -q {{ db_container_name }}
  args:
    chdir: "{{ app_root }}"
  register: _db_container_id

- name: copy the export file into the container
  command: >
    docker cp
    {{ _db_export.dest }}
    {{ _db_container_id.stdout }}:{{ db_export_download_dir }}

- name: drop the current database
  raw: >
    cd {{ app_root }} &&
    docker-compose exec
    --user {{ postgres_user }}
    {{ db_container_name }}
    dropdb --if-exists {{ postgres_db }}

- name: create the database
  raw: >
    cd {{ app_root }} &&
    docker-compose exec
    --user {{ postgres_user }}
    {{ db_container_name }}
    createdb {{ postgres_db }}

- name: restore the database
  raw: >
    cd {{ app_root }} &&
    docker-compose exec
    --user {{ postgres_user }}
    {{ db_container_name }}
    pg_restore -O -c --if-exists -d {{ postgres_db }} {{ _db_export.dest }}

- include_role:
    name: docker-up
